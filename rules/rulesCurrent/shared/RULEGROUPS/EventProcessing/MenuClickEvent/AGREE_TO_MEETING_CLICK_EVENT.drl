package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;


rule "AGREE_TO_MEETING_CLICK_EVENT"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "ACT_MENTOR_MEETING_AGREE" || data.code matches "ACT_MENTOR_MENTORING_AGREE" || data.code matches "ACT_MENTEE_MENTORING_AGREE")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
 		ruleDetails : RuleDetails()
    then

		System.out.println(drools.getRule().getName() + " - Rule fired");

		String code = $message.getData().getCode();
		System.out.println("code: " +code);

		String key = StringUtils.removeStart(code, "ACT_MENTOR_MEETING_AGREE");
		System.out.println("key: " +key);

		String user = userToken.getUserCode();
		System.out.println("user: " + user);
		
		String workflowSignalCode = null;
		switch (code) {
		case "ACT_MENTOR_MEETING_AGREE":
		    workflowSignalCode = "START_AGREE_TO_MEETING";
		    System.out.println("########workflowSignalCode : "+ workflowSignalCode);
		    break;
		case "ACT_MENTOR_MENTORING_AGREE":
		    workflowSignalCode = "START_AGREE_TO_MENTORING";
		    System.out.println("########workflowSignalCode : "+ workflowSignalCode);
		    break;
		}
		case "ACT_MENTEE_MENTORING_AGREE":
		    workflowSignalCode = "START_AGREE_TO_MENTORING_MENTEE";
		    System.out.println("########workflowSignalCode : "+ workflowSignalCode);
		    break;
		}
		
        /* Set result */
        output.setTypeOfResult("SIGNAL");
		output.setResultCode(workflowSignalCode);

		output.setSuitCase(key);
		output.setAskSourceCode(user);
		output.setTargetCode(user);
	
		retract( $message);
	end
