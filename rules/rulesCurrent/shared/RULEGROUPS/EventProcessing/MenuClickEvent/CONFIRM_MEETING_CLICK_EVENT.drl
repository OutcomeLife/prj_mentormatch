package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;
import java.time.format.DateTimeFormatter;


rule "CONFIRM_MEETING_CLICK_EVENT"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "ACT_CONFIRM_MEETING" || data.code matches "ACT_PRI_PRIMARY_AVAILABILITY" || data.code matches "ACT_PRI_SECONDARY_AVAILABILITY" ||
								data.code matches "ACT_TERTIARY_AVAILABILITY")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
 		beUtils : BaseEntityUtils()
    then

		System.out.println(drools.getRule().getName() + " - Rule fired");
		
		String code = $message.getData().getCode();
		
		if(code != "ACT_CONFIRM_MEETING" )
		{
			System.out.println(drools.getRule().getName() + " :: code: " + code);
			
			String applicationCode = $message.getData().getTargetCode();
			System.out.println(drools.getRule().getName() + " :: applicationCode: " + applicationCode);
			
			String menteeCode = $message.getData().getSourceCode();
			System.out.println(drools.getRule().getName() + " :: applicationCode: " + applicationCode);
			
			BaseEntity applicationBe = beUtils.quantumBe(applicationCode, "applicationBe");

 			Answer answer = new Answer(userToken.getUserCode(), applicationBe.getCode(), "PRI_STATUS","MEETING");
 			beUtils.saveAnswer(answer);
			
			System.out.println(drools.getRule().getName() + " :: Answer = " + answer);
		}
		
		retract($message);
	end
