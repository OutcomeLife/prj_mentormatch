package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;
import java.time.format.DateTimeFormatter;


rule "CONFIRM_MEETING_CLICK_EVENT"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "ACT_CONFIRM_MEETING" || data.code matches "ACT_PRI_PRIMARY_AVAILABILITY" || data.code matches "ACT_PRI_SECONDARY_AVAILABILITY" ||
								data.code matches "ACT_TERTIARY_AVAILABILITY")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
 		beUtils : BaseEntityUtils()
    then

		System.out.println(drools.getRule().getName() + " - Rule fired");
		
		String code = $message.getData().getCode();
		
		if(!(code.equals("ACT_CONFIRM_MEETING")))
		{
			System.out.println(drools.getRule().getName() + " :: code: " + code);
			
			String applicationCode = $message.getData().getTargetCode();
			System.out.println(drools.getRule().getName() + " :: applicationCode: " + applicationCode);
			
			String menteeCode = $message.getData().getSourceCode();
			System.out.println(drools.getRule().getName() + " :: applicationCode: " + applicationCode);
			
			BaseEntity applicationBe = beUtils.quantumBe(applicationCode, "applicationBe");

 			Answer answer = new Answer(userToken.getUserCode(), applicationBe.getCode(), "PRI_STATUS","MEETING");
 			beUtils.saveAnswer(answer);
			
			System.out.println(drools.getRule().getName() + " :: Answer = " + answer);
			
			BaseEntity menteeBe = beUtils.quantumBe(menteeCode, "menteeBe");	
			
			if (menteeBe != null) {
			System.out.println("Sending email to mentee for accepting meeting request");

			/* SEND EMAIL */
                String menteeEmail = menteeBe.getValue("PRI_EMAIL", null);
				String menteeName = menteeBe.getValue("PRI_NAME", null);
				if (menteeEmail != null) {

						String subject = "Confirming meeting with mentee";
						String template_id = "d-25aafd3bd7e54b8eb84c3cf29cd9d917";

					    HashMap<String, String> templateData = new HashMap<>();

                        templateData.put("Mentee", menteeName);

                        System.out.println("-------- EMAIL DATA --------");
                        System.out.println("subject: " +subject);
						System.out.println("template_id: " +template_id);
						System.out.println("email: " + menteeEmail);
						System.out.println("Mentee: " +menteeName);
						System.out.println("----------------------------");

						if (!GennySettings.projectUrl.contains("dev")) {

								List<String> bccList = Arrays.asList("internmatch@outcomelife.com.au");
								EmailHelper.sendGrid(beUtils, menteeEmail, null, bccList, subject, template_id, templateData, true);
								System.out.println("Email Sent ||| email: "+ menteeEmail + " ||| Subject: " + subject + "||| template_id: " + template_id);

						} else {
								List<String> bccList = Arrays.asList("tarjnee.gandhi@outcomelife.com.au");
								EmailHelper.sendGrid(beUtils, menteeEmail, null, bccList, subject, template_id, templateData, true);
								System.out.println("Email Sent ||| email: "+ menteeEmail + " ||| Subject: " + subject + "||| template_id: " + template_id);

							System.out.println("WARNING: Email not sent because on Dev server");
						}
				} else {
					System.out.println("ERROR Null Mentee email");
				}
			}
		}
		
		retract($message);
	end
