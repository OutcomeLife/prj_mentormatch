package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;


rule "CONFIRM_MEETING_CLICK_EVENT"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "ACT_CONFIRM_MEETING")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
 		beUtils : BaseEntityUtils()
    then

		System.out.println(drools.getRule().getName() + " - Rule fired");

		String user = userToken.getUserCode();
		System.out.println(drools.getRule().getName() + " :: user: " + user);
		
		
		String targetCode = $message.getData().getTargetCode();
		System.out.println(drools.getRule().getName() + " :: targetCode: " + targetCode);
		
		BaseEntity targetBaseEntity = beUtils.getBaseEntityByCode(targetCode);
		
		String newApplicationCode = null;
 		
 		if (targetCode != null) {
			newApplicationCode = beUtils.quantumStrip(targetBaseEntity, "PRI_APP_LNK_CODE", "newApplication");
			System.out.println(drools.getRule().getName() + " :: newApplicationCode: " + newApplicationCode);
		}

		BaseEntity newApplication = beUtils.quantumBe(newApplicationCode, "newApplication");
		
			
		retract( $message);
	end
