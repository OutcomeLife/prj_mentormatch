package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.notifications.EmailHelper;
import java.util.HashMap;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

rule "MEETING_REQUEST_NOTIFICATION"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		newApplication : BaseEntity(code matches "APP_\\S+" )
		output : OutputParam()
		bucketCode : String(bucketCode.equals("MENTORING"))
		controlSignalCode : String(controlSignalCode.equals("MEETING_REQUEST_NOTIFICATION"))
     then
 		System.out.println(drools.getRule().getName() + " Rule fired" );
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
 		newApplication = beUtils.getBaseEntityByCode(newApplication.getCode());

		System.out.println(drools.getRule().getName() + " :: newApplication = " + newApplication);

		String menteeBeCode = newApplication.getValue("PRI_MENTEE_CODE", null);
		String mentorBeCode = newApplication.getValue("PRI_MENTOR_CODE", null);

		LocalDateTime meetingTime = newApplication.getValue("PRI_MEETING_START_DATETIME", null);
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd MMM yyyy, E, hh:mm:ss a");

		LocalDateTime mentoringSession = meetingTime;
		ArrayList<String> mentoringSessionLst = new ArrayList<String>();
		for(int i = 1 ; i<=12 ; i++){
			if(i==1)
			{
				String firstMentoringStr = dtf.format(mentoringSession);
				mentoringSessionLst.add(firstMentoringStr);

				System.out.println(drools.getRule().getName() + " :: firstMentoringStr = " + firstMentoringStr);
				String uuid = UUID.randomUUID().toString().toUpperCase();
				String newCode = "MTS_"+uuid;
				BaseEntity newMentoringSessions = beUtils.create(newCode, newCode);
				System.out.println("newMentoringSessions = " + newMentoringSessions);
				beUtils.saveAnswer(new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_MTS_"+ i , newCode));
				beUtils.saveAnswer(new Answer(userToken.getUserCode(), newMentoringSessions.getCode(), "PRI_MEETING_TIME"+ i , firstMentoringStr));
			}
			else {

				String uuid = UUID.randomUUID().toString().toUpperCase();
				String newCode = "MTS_"+uuid;
				BaseEntity newMentoringSessions = beUtils.create(newCode, newCode);
				System.out.println("newMentoringSessions = " + newMentoringSessions);
				mentoringSession = mentoringSession.plusHours(336);
				String mentoringSessionStr = dtf.format(mentoringSession);
				mentoringSessionLst.add(mentoringSessionStr);
					System.out.println(drools.getRule().getName() + " :: mentoringSessionStr = " + mentoringSessionStr);
				beUtils.saveAnswer(new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_MTS_"+ i , newCode));
				beUtils.saveAnswer(new Answer(userToken.getUserCode(), newMentoringSessions.getCode(), "PRI_MEETING_TIME"+ i , mentoringSessionStr));

				
			}
		}
		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_NEXT_MEETING" , "PRI_MENTORING_MEETING_1"));

		String meetingTimeStr = dtf.format(meetingTime);

		System.out.println("^^^^^^^^^ menteeBeCode = " + menteeBeCode);
		System.out.println("^^^^^^^^^ mentorBeCode = " + mentorBeCode);

		BaseEntity menteeBe = beUtils.getBaseEntityByCode(menteeBeCode);
		BaseEntity mentorBe = beUtils.getBaseEntityByCode(mentorBeCode);
		if (menteeBe != null) {
			System.out.println("Sending email to mentee for created meeting request");

			/* SEND EMAIL */
                String menteeEmail = menteeBe.getValue("PRI_EMAIL", null);
				String menteeName = menteeBe.getValue("PRI_NAME", null);
				if (menteeEmail != null) {

						String subject = "Dates and times of your upcoming MentorMatch mentoring sessions";
						String template_id = "d-2c8a64540ba64935964a38087559ac84";

					    HashMap<String, String> templateData = new HashMap<>();

                        templateData.put("Mentee", menteeName);
                        for (int i = 0; i < mentoringSessionLst.size(); i++) {
      						 templateData.put("MeetingTime" + i, mentoringSessionLst.get(i));
   					 	}
                        System.out.println("-------- EMAIL DATA --------");
                        System.out.println("subject: " +subject);
						System.out.println("template_id: " +template_id);
						System.out.println("email: " + menteeEmail);
						System.out.println("Mentee: " +menteeName);
						System.out.println("----------------------------");

						if (!GennySettings.projectUrl.contains("dev")) {

								List<String> bccList = Arrays.asList("mentormatch@gada.io");
								EmailHelper.sendGrid(beUtils, menteeEmail, null, bccList, subject, template_id, templateData, true);
								System.out.println("Email Sent ||| email: "+ menteeEmail + " ||| Subject: " + subject + "||| template_id: " + template_id);

						} else {
								List<String> bccList = Arrays.asList("mentormatch@gada.io");
								EmailHelper.sendGrid(beUtils, menteeEmail, null, bccList, subject, template_id, templateData, true);
								System.out.println("Email Sent ||| email: "+ menteeEmail + " ||| Subject: " + subject + "||| template_id: " + template_id);

							System.out.println("WARNING: Email not sent because on Dev server");
						}
				} else {
					System.out.println("ERROR Null Mentee email");
				}
			}
			/* Email to mentor created meeting request*/

		if (mentorBe != null) {
			System.out.println("Sending email to mentor for metoring sessions request");

			/* SEND EMAIL */
                String mentorEmail = mentorBe.getValue("PRI_EMAIL", null);
				System.out.println("mentorEmail: " + mentorEmail);

				String mentorName = mentorBe.getValue("PRI_NAME", null);
				System.out.println("mentorName: " + mentorName);

				if (mentorEmail != null) {

						String subject = "Dates and times of your upcoming MentorMatch mentoring sessions â€“ please confirm!";
						String template_id = "d-73a4f88952794b4fa61d60382687c5a6";

						BaseEntity project = beUtils.getBaseEntityByCode("PRJ_"+ serviceToken.getRealm().toUpperCase());

                		String token = KeycloakUtils.getImpersonatedToken(serviceToken.getKeycloakUrl(), serviceToken.getRealm(), project, mentorEmail, serviceToken.getToken());
               			System.out.println("token: " + token);

						String urlParentCode = "QUE_FAKE_PARENT";
                		String urlCode = "ACT_MENTORING_TIME_AGREE";

                		/* Encode each section of the url */
                		urlParentCode = new String(Base64.getEncoder().encode(urlParentCode.getBytes()));
                		urlCode = new String(Base64.getEncoder().encode(urlCode.getBytes()));

                		String url = GennySettings.projectUrl+"/home/"+urlParentCode+"/"+urlCode;

                		url = url + "?token=" + token;
                		System.out.println("url: " + url);

						HashMap<String, String> templateData = new HashMap<String, String>();

                        templateData.put("Mentor", mentorName);
                        templateData.put("url", url);
						for (int i = 0; i < mentoringSessionLst.size(); i++) {
      						 templateData.put("MeetingTime" + i, mentoringSessionLst.get(i));
   					 	}
                        System.out.println("-------- EMAIL DATA --------");
                        System.out.println("subject: " +subject);
						System.out.println("template_id: " +template_id);
						System.out.println("email: " + mentorEmail);
						System.out.println("Mentor: " +mentorName);
						System.out.println("url: " + url);
						System.out.println("----------------------------");

						if (!GennySettings.projectUrl.contains("dev")) {

								List<String> bccList = Arrays.asList("mentormatch@gada.io");
								EmailHelper.sendGrid(beUtils, mentorEmail, null, bccList, subject, template_id, templateData, true);

								System.out.println("Email Sent ||| email: "+ mentorEmail + " ||| Subject: " + subject + "||| template_id: " + template_id);

						} else {
								List<String> bccList = Arrays.asList("mentormatch@gada.io");
								EmailHelper.sendGrid(beUtils, mentorEmail, null, bccList, subject, template_id, templateData, true);
								System.out.println("Email Sent ||| email: "+ mentorEmail + " ||| Subject: " + subject + "||| template_id: " + template_id);

							System.out.println("WARNING: Email not sent because on Dev server");
						}
				} else {
					System.out.println("ERROR Null Mentor email");
				}
		}
		TableUtils.searchTable(beUtils,"SBE_APPLICATIONS_MEETING", true, "PRI_CODE", newApplication.getCode());
		retract(newApplication)
		retract(bucketCode)
		retract(controlSignalCode)

end
