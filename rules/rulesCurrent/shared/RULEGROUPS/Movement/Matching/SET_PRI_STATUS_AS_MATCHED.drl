package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.KeycloakUtils;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.notifications.EmailHelper;

rule "SET_PRI_STATUS_AS_MATCHED"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		bucketCode : String(bucketCode.equals("TRAINING"))
		controlSignalCode : String(controlSignalCode.equals("MATCH"))
		targetBaseEntity : BaseEntity( code matches "PER_\\S+" )

     then
 		System.out.println("SET_PRI_STATUS_AS_MATCHED: Rule fired" );

		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		/* Refresh the BaseEntity because mysterious reasons told to me by Chris... */
 		targetBaseEntity = beUtils.getBaseEntityByCode(targetBaseEntity.getCode());
		System.out.println("SET_PRI_STATUS_AS_MATCHED: targetBaseEntity = " + newApplication);

		/* Get APP Code */
		String newApplicationCode = "";

		if (targetBaseEntity.getCode() != null) {
			newApplicationCode = beUtils.quantumStrip(targetBaseEntity, "PRI_APP_LNK_CODE", "newApplication");
			System.out.println("SET_PRI_STATUS_AS_MATCHED:: newApplicationCode: " + newApplicationCode);
		}

		BaseEntity newApplication = beUtils.quantumBe(newApplicationCode, "newApplication");

		/* Get Mentee Details */
		String associatedMenteeBeCode = beUtils.quantumStrip(newApplication, "PRI_MENTEE_CODE", "associatedMenteeBeCode");
		System.out.println("SET_PRI_STATUS_AS_MATCHED:: associatedMenteeBeCode: " + associatedMenteeBeCode);
		BaseEntity associatedMenteeBe = beUtils.quantumBe(associatedMenteeBeCode, "associatedMenteeBe");

		if (newApplication != null) {

			Answer answer = new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_STATUS", "MATCHED");
			beUtils.saveAnswer(answer);
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_DISABLED", "false"));

			System.out.println("SET_PRI_STATUS_AS_MATCHED: Answer = " + answer);
			System.out.println("SET_PRI_STATUS_AS_MATCHED: newApplication = " + newApplication);

			System.out.println("## Removing from Training Bucket ##");

			/* Remove from Training bucket */
			Answer answerDisable = new Answer(userToken.getUserCode(), associatedMenteeBe.getCode(), "PRI_DISABLED", true);
			beUtils.saveAnswer(answerDisable);
			System.out.println("answerDisable: " +answerDisable);

			QDataBaseEntityMessage beMsg = new QDataBaseEntityMessage(newApplication);
			beMsg.setToken(userToken.getToken());
			beMsg.setReplace(true);
			VertxUtils.writeMsg("webcmds", JsonUtils.toJson(beMsg));

			TableUtils.moveEntity(associatedMenteeBe.getCode(), "SBE_MENTEE_TRAINING", null, beUtils);
			TableUtils.moveEntity(newApplication.getCode(), null, "SBE_MATCHED", beUtils);

		} else {
			System.out.println("newApplication is NULL");
		}

		retract(targetBaseEntity)
		retract(bucketCode)
		retract(controlSignalCode)
end