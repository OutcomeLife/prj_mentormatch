package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.KeycloakUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Base64;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.notifications.EmailHelper;

rule "CREATE_MENTEE_MENTOR_APP"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		newApplication : BaseEntity( code matches "APP_\\S+" )
		bucketCode : String(bucketCode.equals("MENTOR"))
		controlSignalCode : String(controlSignalCode.equals("INVITE"))
     then
 		System.out.println(drools.getRule().getName() + " :: Rule fired" );

		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
		
		System.out.println(drools.getRule().getName() + " :: newApplication = " + newApplication.getCode());

 		newApplication = beUtils.getBaseEntityByCode(newApplication.getCode());
 		
 		String menteeCode = newApplication.getValue("PRI_MENTEE_CODE", null);
 		String mentorCode = newApplication.getValue("PRI_MENTOR_CODE", null);
 		
 		System.out.println(drools.getRule().getName() + " :: menteeCode = " + menteeCode);
 		System.out.println(drools.getRule().getName() + " :: mentorCode = " + mentorCode);
 		
 		BaseEntity mentorBe = beUtils.getBaseEntityByCode(mentorCode);
 		BaseEntity menteeBe = beUtils.getBaseEntityByCode(menteeCode);
 		

		if (mentorBe != null & menteeBe != null) {

			String menteeName = menteeBe.getValue("PRI_NAME", null);
			String menteeEmail = menteeBe.getValue("PRI_EMAIL", null);
			String menteeMobile = menteeBe.getValue("PRI_MOBILE", null);

			if (menteeName != null) {
								Answer answer = new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_MENTEE_NAME", menteeName);
								beUtils.saveAnswer(answer);
						} else {
							System.out.println("ERROR: Null name");
						}

			if (menteeMobile != null) {
				Answer answer = new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_MENTEE_MOBILE", menteeMobile);
				beUtils.saveAnswer(answer);
			} else {
				System.out.println("ERROR: Null menteeMobile");
			}

			if (menteeEmail != null) {
				Answer answer = new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_MENTEE_EMAIL", menteeEmail);
				beUtils.saveAnswer(answer);
			} else {
				System.out.println("ERROR: Null menteeEmail");
			}

			/* Setting Mentor Values */
			String mentorName = mentorBe.getValue("PRI_FIRSTNAME", null);
			if (mentorName != null) {
				Answer answer = new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_MENTOR_NAME", mentorName);
				beUtils.saveAnswer(answer);
			} else {
				System.out.println("ERROR: Null mentorName");
			}

			/* Saving APP code in PER Mentor */
			if (newApplication.getCode() != null) {
				beUtils.saveAnswer(new Answer(userToken.getUserCode(), mentorBe.getCode(), "PRI_APP_LNK_CODE", newApplication.getCode()));
			}

            /* Send Invite Email to Mentor */
            String mentorEmail = mentorBe.getValue("PRI_EMAIL", null);

            if (mentorEmail != null) {
                System.out.println("Sending invite to " + mentorEmail);

                BaseEntity project = beUtils.getBaseEntityByCode("PRJ_"+ serviceToken.getRealm().toUpperCase());

                String token = KeycloakUtils.getImpersonatedToken(serviceToken.getKeycloakUrl(), serviceToken.getRealm(), project, mentorEmail, serviceToken.getToken());
                System.out.println("token: " + token);

				String urlParentCode = "QUE_FAKE_PARENT";
				String urlCode = "ACT_MENTOR_AGREE_TO_MENTOR";

				/* Encode each section of the url */
				urlParentCode = new String(Base64.getEncoder().encode(urlParentCode.getBytes()));
				urlCode = new String(Base64.getEncoder().encode(urlCode.getBytes()));

				String url = GennySettings.projectUrl+"/home/"+urlParentCode+"/"+urlCode;
                System.out.println("url: " + url);

                url = url + "?token=" + token;
                System.out.println("url: " + url);

                String subject = "Request generated for a first catchup, provides your availability";
                String template_id = "d-d39f6a5691f044a89aff8f8a70d0236b";

                System.out.println("email: " + mentorEmail);
                System.out.println("subject: " + subject);
                System.out.println("template_id: " + template_id);

                HashMap<String, String> templateData = new HashMap<String, String>();
                templateData.put("Mentor", mentorName);
                templateData.put("url", url);

                List<String> bccList = Arrays.asList("rahul@gada.io", "tarjnee.gandhi@outcomelife.com.au", "mentormatch@gada.io");

                    EmailHelper.sendGrid(beUtils, mentorEmail, null, bccList, subject, template_id, templateData, true);
                    System.out.println("Sent Email to " + mentorEmail);
                    System.out.println("bccList:: " + bccList);


            } else {
                System.out.println("ERROR: Null mentorEmail");
            }

        }

	retract(newApplication)
	retract(bucketCode)
	retract(controlSignalCode)
end