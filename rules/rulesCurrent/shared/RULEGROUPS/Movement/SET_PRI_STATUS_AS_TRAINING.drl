package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;

rule "SET_PRI_STATUS_AS_TRAINING"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		associatedMenteeBe : BaseEntity()
		output : OutputParam()
		bucketCode : String(bucketCode.equals("ON_SHORE"))
		controlSignalCode : String(controlSignalCode.equals("TRAINING"))

     then
 		System.out.println("SET_PRI_STATUS_AS_TRAINING: Rule fired" );
 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		/* Refresh the BaseEntity because mysterious reasons Chris told me... he said, "Donâ€™t ask me why. The rules suck" */
 		associatedMenteeBe = beUtils.getBaseEntityByCode(associatedMenteeBe.getCode());
		System.out.println("SET_PRI_STATUS_AS_MATCHED: associatedMenteeBe = " + associatedMenteeBe);

 		Answer answer = new Answer(userToken.getUserCode(),associatedMenteeBe.getCode(),"PRI_STATUS","TRAINING");
 		beUtils.saveAnswer(answer);

		System.out.println("SENDING MESSAGE TO FRONTEND");

		QDataBaseEntityMessage msg = new QDataBaseEntityMessage(associatedMenteeBe);
		msg.setToken(userToken.getToken());
		msg.setReplace(true);
		VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));

		System.out.println("SET_PRI_STATUS_AS_TRAINING: Answer = " + answer);
		System.out.println("SET_PRI_STATUS_AS_TRAINING: associatedMenteeBe = " + associatedMenteeBe);

		TableUtils.moveEntity(associatedMenteeBe.getCode(), "SBE_ON_SHORE", "SBE_MENTEE_TRAINING", beUtils);


		retract(associatedMenteeBe)
		retract(bucketCode)
		retract(controlSignalCode)

end
