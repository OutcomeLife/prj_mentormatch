package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.notifications.EmailHelper;
import java.util.HashMap;
import java.time.LocalDateTime;

rule "SET_PRI_STATUS_AS_MENTORING"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		newApplication : BaseEntity(code matches "APP_\\S+" )
		output : OutputParam()
		bucketCode : String(bucketCode.equals("MATCHED"))
		controlSignalCode : String(controlSignalCode.equals("MENTORING"))
		beUtils : BaseEntityUtils()
     then
 		System.out.println("SET_PRI_STATUS_AS_MENTORING: Rule fired" );

 		newApplication = beUtils.getBaseEntityByCode(newApplication.getCode());

 		Answer answer = new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_STATUS","MENTORING");
 		beUtils.saveAnswer(answer);

		System.out.println("SET_PRI_STATUS_AS_MENTORING: Answer = " + answer);
		System.out.println("SET_PRI_STATUS_AS_MENTORING: newApplication = " + newApplication);


		TableUtils.moveEntity(newApplication.getCode(), "SBE_MATCHED", "SBE_ROTARY_MENTORING", beUtils);

		String menteeBeCode = newApplication.getValue("PRI_MENTEE_CODE", null);
		String mentorBeCode = newApplication.getValue("PRI_MENTOR_CODE", null);
		
		LocalDateTime meetingTime = newApplication.getValue("PRI_MEETING_START_DATETIME", null);
		
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("hh:mm:ss a, E, dd MMM yyyy");
		String meetingTimeStr = dtf.format(meetingTime);
		
		String meetingType = newApplication.getValue("LNK_MEETING_TYPE", null);
		
		System.out.println("^^^^^^^^^ menteeBeCode = " + menteeBeCode);
		System.out.println("^^^^^^^^^ mentorBeCode = " + mentorBeCode);
		System.out.println("^^^^^^^^^ meetingTimeStr = " + meetingTimeStr);
		System.out.println("^^^^^^^^^ meetingType = " + meetingType);

		BaseEntity menteeBe = beUtils.getBaseEntityByCode(menteeBeCode);
		BaseEntity mentorBe = beUtils.getBaseEntityByCode(mentorBeCode);
		if (menteeBe != null) {
			System.out.println("Sending email to mentee for created meeting request");

			/* SEND EMAIL */
                String menteeEmail = menteeBe.getValue("PRI_EMAIL", null);
				System.out.println("menteeEmail: " + menteeEmail);

				String menteeName = menteeBe.getValue("PRI_NAME", null);
				System.out.println("menteeName: " + menteeName);

				if (menteeEmail != null) {

						String subject = "Dates and times of your upcoming MentorMatch mentoring sessions";
						String template_id = "d-263a824859cb46b69b17ee80e8925989";

						

					    HashMap<String, String> templateData = new HashMap<>();

                        templateData.put("Mentee", menteeName);
                        templateData.put("MeetingTime", meetingTimeStr);

                        System.out.println("-------- EMAIL DATA --------");
                        System.out.println("subject: " +subject);
						System.out.println("template_id: " +template_id);
						System.out.println("email: " + menteeEmail);
						System.out.println("Mentee: " +menteeName);
						System.out.println("----------------------------");

						if (!GennySettings.projectUrl.contains("dev")) {

								List<String> bccList = Arrays.asList("internmatch@outcomelife.com.au");
								EmailHelper.sendGrid(beUtils, menteeEmail, null, bccList, subject, template_id, templateData, true);


								System.out.println("Email Sent ||| Subject: " + subject + "||| template_id: " + template_id);

						} else {
								List<String> bccList = Arrays.asList("internmatch@outcomelife.com.au");
								menteeEmail = "tarjnee.gandhi@outcomelife.com.au";
								EmailHelper.sendGrid(beUtils, menteeEmail, null, bccList, subject, template_id, templateData, true);

								System.out.println("Email Sent ||| Subject: " + subject + "||| template_id: " + template_id);

							System.out.println("WARNING: Email not sent because on Dev server");
						}
				} else {
					System.out.println("ERROR Null Mentee email");
				}
			}
			/* Email to mentor created meeting request*/

		if (mentorBe != null) {
			System.out.println("Sending email to mentor for meeting request");

			/* SEND EMAIL */
                String mentorEmail = mentorBe.getValue("PRI_EMAIL", null);
				System.out.println("mentorEmail: " + mentorEmail);

				String mentorName = mentorBe.getValue("PRI_NAME", null);
				System.out.println("mentorName: " + mentorName);

				if (mentorEmail != null) {

						String subject = "Dates and times of your upcoming MentorMatch mentoring sessions â€“ please confirm!";
						String template_id = "d-7d617d2240dd4ec980306f0ec2102d01";

						HashMap<String, String> templateData = new HashMap<String, String>();

                        templateData.put("Mentor", mentorName);
                        templateData.put("MeetingTime", meetingTimeStr);

                        System.out.println("-------- EMAIL DATA --------");
                        System.out.println("subject: " +subject);
						System.out.println("template_id: " +template_id);
						System.out.println("email: " + mentorEmail);
						System.out.println("Mentor: " +mentorName);
						System.out.println("----------------------------");

						if (!GennySettings.projectUrl.contains("dev")) {

								List<String> bccList = Arrays.asList("internmatch@outcomelife.com.au");
								EmailHelper.sendGrid(beUtils, mentorEmail, null, bccList, subject, template_id, templateData, true);

								System.out.println("Email Sent ||| Subject: " + subject + "||| template_id: " + template_id);

						} else {
								List<String> bccList = Arrays.asList("internmatch@outcomelife.com.au");
								mentorEmail = "tarjnee.gandhi@outcomelife.com.au";
								EmailHelper.sendGrid(beUtils, mentorEmail, null, bccList, subject, template_id, templateData, true);

								System.out.println("Email Sent ||| Subject: " + subject + "||| template_id: " + template_id);

							System.out.println("WARNING: Email not sent because on Dev server");
						}
				} else {
					System.out.println("ERROR Null Mentor email");
				}
		}

		retract(newApplication)
		retract(bucketCode)
		retract(controlSignalCode)

end
