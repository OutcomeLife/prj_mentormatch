package life.genny.rules;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwandautils.QwandaMessage;
import org.json.JSONObject;

import life.genny.notifications.EmailHelper;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.notifications.SmsHelper;
import java.util.Arrays;
import java.time.ZoneOffset;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.KeycloakUtils;
import java.time.LocalDateTime;
import life.genny.notifications.EmailHelper;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.notifications.SmsHelper;
import java.util.Arrays;
import java.time.ZoneOffset;


rule "MEETING_REMINDER_EVENT"
	ruleflow-group 'Movement'
	salience 2
	no-loop
	when
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken( code == "PER_SERVICE")
		newApplication: BaseEntity()
		output : OutputParam( )
		controlSignalCode : String(controlSignalCode.equals("SCHEDULE_MEETING"))
	then
		System.out.println(drools.getRule().getName() + " : Rule fired" );
		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
		
		newApplication = beUtils.getBaseEntityByCode(newApplication.getCode());
		
		String menteeBeCode = newApplication.getValue("PRI_MENTEE_CODE", null);
		BaseEntity menteeBe = beUtils.getBaseEntityByCode(menteeBeCode);
		
		System.out.println("menteeBe "+menteeBe);
		/*if (menteeBe != null) {
                LocalDateTime meetingTime = menteeBe.getValue("PRI_MEETING_START_DATETIME", null);
				System.out.println("meetingTime: " + meetingTime);
				
    			System.out.println("### The Orange timer ~ " + meetingTime.plusHours(-24));
		} */
		
		System.out.println("################## START Shleemy ##################");
				
		String scheduleMsgCode = newApplication.getCode() + "_SCHEDULE_MEETING_REMINDER_24HRS_BEFORE";
		
		LocalDateTime now = LocalDateTime.now(ZoneOffset.UTC);
    	String prettyNow = dtf.format(now);
    	System.out.println("The current date and time is ~ " + prettyNow);
		
    	
    	
		LocalDateTime orangeTimer = now.plusMinutes(1);
		String prettyOrange = dtf.format(orangeTimer);
		System.out.println("The Orange timer is set for ~ " + prettyOrange);
		
		ShleemyUtils.scheduleMessage(userToken, "SCHEDULE_MEETING_REMINDER_24HRS_BEFORE", scheduleMsgCode,  orangeTimer, newApplication.getCode())
		
		System.out.println("################## END Shleemy ##################");
		
		
		
		retract(controlSignalCode);
		retract(newApplication);
	end
