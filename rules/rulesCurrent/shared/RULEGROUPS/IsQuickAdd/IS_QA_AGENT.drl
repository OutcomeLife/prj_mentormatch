package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.GennySettings;
import java.util.UUID;
import life.genny.notifications.EmailHelper;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.notifications.SmsHelper;
import java.util.Arrays;
import java.time.ZoneOffset;
import java.security.SecureRandom;
import java.util.List;
import java.util.ArrayList;

rule "IS_QA_AGENT"
    ruleflow-group 'IsQuickAdd'
    no-loop true
    salience 1000
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("IS_QA_AGENT"))
		newBe : BaseEntity()
		beUtils: BaseEntityUtils()

     then
 		System.out.println("IS_QA_AGENT: Rule fired" );
 		System.out.println("IS_QA_AGENT: newBe = " + newBe.getCode());

 	 /* Construct answer with Source, Target, Attribute Code, Value */

 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_IS_AGENT", "true"));
		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_AGENT_CODE", newBe.getCode()));
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS", "PENDING"));
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_DISABLED", "false"));
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_STATUS_COLOR", "#5cb85c"));
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_PROFILE", "COMPLETE"));
		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_USER_PROFILE", "COMPLETE"));

		String target = newBe.getCode();

		BaseEntity userBE = beUtils.getBaseEntityByCode(target);
		System.out.println("userBE = " +userBE);

		newBe = beUtils.getBaseEntityByCode(newBe.getCode());

		/* Set up in Keycloak */

		String randomPW = "n/a VZQ564P828";
	    int targetLength = target.length();

	    System.out.println(target);
	    System.out.println(targetLength);

	    if (target.startsWith("PER_") && targetLength == 40) {
	      /*randomPW = target.substring(30,40);*/
	      System.out.println("Random Password used: " + randomPW);
	    } else {
	      System.out.println("Backup password used: " + randomPW);
	    }

		BaseEntity user = beUtils.getBaseEntityByCode(newBe.getCode());
		String userStr = newBe.getCode();
		String[] userSplit = userStr.split("_");
		String userCode = userSplit[1];
		System.out.println("User:: "+user+" with userCode:: "+userCode);

		String userId = "";
		String email = "";

		String firstname = user.getValue("PRI_FIRSTNAME",null);
		if (firstname != null) {
			String lastname = user.getValue("PRI_LASTNAME",null);
			if (lastname != null) {
				email = user.getValue("PRI_EMAIL",null);
				if (email != null) {
					/*String userPassword = UUID.randomUUID().toString().substring(0,10);*/
					/* TODO HACK */
					if (true) {
						/*String userPassword = "password1";*/
						userId = KeycloakUtils.updateUser(userCode,serviceToken.getToken(), serviceToken.getRealm(), email, firstname, lastname,  email, null, "user", "users");
						userId = userId.toUpperCase();
						Answer keycloakId = new Answer(beUtils.getGennyToken().getUserCode(),newBe.getCode(),"PRI_UUID",userId);
						beUtils.saveAnswer(keycloakId);
						System.out.println("Created User "+email+" in Keycloak with id = "+userId + " and password (depricated): " + randomPW);
					} else {
					     System.out.println("KEYCLOAK USER CREATION DISABLED IN RULE IS_AGENT");
					}
				}
			}
		}



		String endPoint = GennySettings.projectUrl + "/v7/notes";

		String tag = "ni";

		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), tag, userToken.getUserCode(), "Added a Agent: " + firstname, serviceToken.getToken());

		System.out.println("I just posted the note");
		System.out.println("Note endPoint: " +endPoint);
		System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());

		BaseEntity agentBe = beUtils.getBaseEntityByCode(newBe.getCode());

		if(agentBe != null){

			QDataBaseEntityMessage agentBeMsg = new QDataBaseEntityMessage(agentBe);
			agentBeMsg.setToken(userToken.getToken());
			VertxUtils.writeMsg("webcmds", JsonUtils.toJson(agentBeMsg));
		}

		/* Send email to Agent */


		String rawSendEmail = user.getValue("LNK_SEND_EMAIL", null);
		System.out.println("rawSendEmail: " + rawSendEmail + " Sending email to: " + email);

		/* Generate a random 15 char password */
		char[] allowed = "abcdefghijklmnopqrstuvwxyzABCDEFGJKLMNPRSTUVWXYZ0123456789^$?!@#%&".toCharArray();
		String password = new SecureRandom().ints(15, 0, allowed.length).mapToObj(i -> String.valueOf(allowed[i])).collect(Collectors.joining());
		KeycloakUtils.setPassword(serviceToken.getToken(), serviceToken.getRealm(), userId, password, true);
		System.out.println("char password: " + password);

		/*if (rawSendEmail.equals("SEL_YES")) {

			BaseEntity project = beUtils.getBaseEntityByCode("PRJ_"+ serviceToken.getRealm().toUpperCase());

			String token = KeycloakUtils.getImpersonatedToken(serviceToken.getKeycloakUrl(), serviceToken.getRealm(), project, email, serviceToken.getToken());
			System.out.println("token: " + token);

			String url = GennySettings.projectUrl+"/home/UVVFX0ZBS0VfUEFSRU5U/UVVFX0ZJTklTSF9NRU5URUU=";
			System.out.println("url: " + url);

			url = url + "?token=" + token;
			System.out.println("url: " + url);

			String subject = "You have been registered on MentorMatch";
			String template_id = "d-55950bcdfb6e44c4a4551150b9b79d5e";

			System.out.println("email: " + email);
			System.out.println("subject: " + subject);
			System.out.println("template_id: " + template_id);
			System.out.println("SEL_YES:: char password: " + password);

			HashMap<String, String> templateData = new HashMap<String, String>();
			templateData.put("Agent", firstname);
			templateData.put("pw", password);
			templateData.put("url", url);

			List<String> bccList = Arrays.asList("mentormatch@gada.io");

			if (!GennySettings.projectUrl.contains("dev")) {
			if (true) {
				EmailHelper.sendGrid(beUtils, email, null, bccList, subject, template_id, templateData, true);
				System.out.println("Sent Email to " + email);
				System.out.println("bccList:: " + bccList);
			} else {
				System.out.println("WARNING: Email not sent because on Dev server");
			}

		} else {
			System.out.println("rawSendEmail is not sent: " + rawSendEmail);
		}*/


		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */

		retract(newBe)

end